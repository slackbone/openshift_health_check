---
- name: Create data output directory
  file:
    path: "{{ data_output_dir }}"
    state: directory
    mode: '0755'

- name: Check if oc command is available
  shell: |
    if command -v oc >/dev/null 2>&1; then
      echo "found"
    else
      echo "not_found"
    fi
  register: oc_check
  failed_when: false
  changed_when: false

- name: Check if kubectl command is available
  shell: |
    if command -v kubectl >/dev/null 2>&1; then
      echo "found"
    else
      echo "not_found"
    fi
  register: kubectl_check
  failed_when: false
  changed_when: false

- name: Fail if neither oc nor kubectl is available
  fail:
    msg: "Neither 'oc' nor 'kubectl' command is available. Please install OpenShift CLI or Kubernetes CLI."
  when: (oc_check is defined and oc_check.stdout == "not_found") and (kubectl_check is defined and kubectl_check.stdout == "not_found")

- name: Set fact for CLI command
  set_fact:
    cli_command: "{{ 'oc' if (oc_check is defined and oc_check.stdout == 'found') else 'kubectl' }}"

- name: Set environment variables for cluster connectivity
  set_fact:
    cluster_env:
      KUBECONFIG: "{{ openshift_kubeconfig }}"
  when: openshift_cluster_url is defined and openshift_cluster_url != ""

- name: Test cluster connectivity
  command: "{{ cli_command }} cluster-info"
  register: cluster_connectivity
  failed_when: false
  changed_when: false
  environment: "{{ cluster_env | default({'KUBECONFIG': openshift_kubeconfig}) }}"

- name: Fail if cluster connectivity test fails
  fail:
    msg: "Cannot connect to OpenShift cluster. Please check your credentials and cluster URL."
  when: cluster_connectivity.rc != 0

- name: Display cluster connectivity status
  debug:
    msg: "Successfully connected to OpenShift cluster using {{ cli_command }}"

- name: Get cluster version information
  command: "{{ cli_command }} version"
  register: cluster_version
  environment: "{{ cluster_env | default({'KUBECONFIG': openshift_kubeconfig}) }}"

- name: Display cluster version
  debug:
    msg: "{{ cluster_version.stdout_lines }}"

- name: Set fact for collection metadata
  set_fact:
    collection_metadata:
      cli_command: "{{ cli_command }}"
      cluster_url: "{{ openshift_cluster_url }}"
      collection_timestamp: "{{ ansible_date_time.iso8601 }}"
      collection_host: "{{ inventory_hostname }}"
      ansible_version: "{{ ansible_version }}"
